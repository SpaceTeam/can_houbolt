#ifndef PI_CONTROL_CHANNEL_DEF_H_
#define PI_CONTROL_CHANNEL_DEF_H_

#include "cmds.h"

#define PI_CONTROL_DATA_N_BYTES 2

typedef enum
{
	PI_CONTROL_ENABLED,
	PI_CONTROL_TARGET,
	PI_CONTROL_P,
	PI_CONTROL_I,
	PI_CONTROL_SENSOR_SLOPE,
	PI_CONTROL_SENSOR_OFFSET,
	PI_CONTROL_OPERATING_POINT,
	PI_CONTROL_ACTUATOR_CHANNEL_ID,
	PI_CONTROL_SENSOR_CHANNEL_ID,
	PI_CONTROL_REFRESH_DIVIDER
} PI_CONTROL_VARIABLES;

typedef enum
{
	PI_CONTROL_REQ_RESET_SETTINGS = COMMON_REQ_RESET_SETTINGS,	// NO payload
	PI_CONTROL_RES_RESET_SETTINGS = COMMON_RES_RESET_SETTINGS,	// NO payload
	PI_CONTROL_REQ_STATUS = COMMON_REQ_STATUS,					// NO payload
	PI_CONTROL_RES_STATUS = COMMON_RES_STATUS,					// TODO: some status msg
	PI_CONTROL_REQ_SET_VARIABLE = COMMON_REQ_SET_VARIABLE,		// SetMsg_t
	PI_CONTROL_RES_SET_VARIABLE = COMMON_RES_SET_VARIABLE,		// SetMsg_t
	PI_CONTROL_REQ_GET_VARIABLE = COMMON_REQ_GET_VARIABLE,		// GetMsg_t
	PI_CONTROL_RES_GET_VARIABLE = COMMON_RES_GET_VARIABLE,		// SetMsg_t
	// = COMMON_TOTAL_CMDS,						// NO payload

	PI_CONTROL_TOTAL_CMDS
} PI_CONTROL_CMDs;

#endif
